Sure! Here's a complete simplified version of your ASP.NET Web Forms application that:

‚úÖ Removes login/LDAP authentication (for now)
‚úÖ Keeps the Meeting Form with Bootstrap UI
‚úÖ Generates a custom Meeting ID (MTG-yyyyMMdd-###)
‚úÖ Saves data to SQL Server via Stored Procedure using SQL Server Authentication


---

‚úÖ OVERVIEW

What‚Äôs included:

MeetingForm.aspx (Bootstrap-based form)

MeetingForm.aspx.cs (Code-behind with ID generation + DB save)

Web.config (SQL connection string)

SQL table and stored procedure



---

üìÑ 1. MeetingForm.aspx (UI Form)

<%@ Page Language="C#" AutoEventWireup="true" CodeFile="MeetingForm.aspx.cs" Inherits="MeetingForm" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Attendance Logging</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server">
        <div class="container mt-5">
            <div class="card shadow rounded p-4">
                <h3 class="mb-4">Meeting Attendance Logging</h3>

                <div class="mb-3">
                    <label class="form-label">Title / Agenda</label>
                    <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Start Date & Time</label>
                    <asp:TextBox ID="txtStart" runat="server" TextMode="DateTimeLocal" CssClass="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">End Date & Time</label>
                    <asp:TextBox ID="txtEnd" runat="server" TextMode="DateTimeLocal" CssClass="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Venue / Location</label>
                    <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Organizer</label>
                    <asp:TextBox ID="txtOrganizer" runat="server" CssClass="form-control" />
                </div>

                <asp:Button ID="btnSave" runat="server" Text="Save" CssClass="btn btn-primary" OnClick="btnSave_Click" />
                <asp:Label ID="lblStatus" runat="server" CssClass="form-text mt-3 text-success" />
            </div>
        </div>
    </form>
</body>
</html>


---

üí° 2. MeetingForm.aspx.cs (Code-behind)

using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

public partial class MeetingForm : System.Web.UI.Page
{
    protected void Page_Load(object sender, EventArgs e) { }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        string title = txtTitle.Text;
        DateTime start = Convert.ToDateTime(txtStart.Text);
        DateTime end = Convert.ToDateTime(txtEnd.Text);
        string venue = txtVenue.Text;
        string organizer = txtOrganizer.Text;

        // Generate MeetingCode: MTG-yyyyMMdd-###
        string datePart = DateTime.Now.ToString("yyyyMMdd");
        string meetingCodePrefix = "MTG-" + datePart + "-";
        int nextSeq = GetNextMeetingSequence(datePart);
        string meetingCode = meetingCodePrefix + nextSeq.ToString("D3");

        string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        using (SqlConnection conn = new SqlConnection(connStr))
        {
            using (SqlCommand cmd = new SqlCommand("InsertMeeting", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@MeetingCode", meetingCode);
                cmd.Parameters.AddWithValue("@Title", title);
                cmd.Parameters.AddWithValue("@StartTime", start);
                cmd.Parameters.AddWithValue("@EndTime", end);
                cmd.Parameters.AddWithValue("@Venue", venue);
                cmd.Parameters.AddWithValue("@Organizer", organizer);

                conn.Open();
                cmd.ExecuteNonQuery();
                conn.Close();

                lblStatus.Text = "Meeting saved with ID: " + meetingCode;
            }
        }
    }

    private int GetNextMeetingSequence(string datePart)
    {
        int count = 0;
        string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

        using (SqlConnection conn = new SqlConnection(connStr))
        {
            string query = "SELECT COUNT(*) FROM Meetings WHERE MeetingCode LIKE @codePattern";
            using (SqlCommand cmd = new SqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@codePattern", "MTG-" + datePart + "-%");

                conn.Open();
                count = (int)cmd.ExecuteScalar();
                conn.Close();
            }
        }

        return count + 1;
    }
}


---

‚öôÔ∏è 3. Web.config ‚Äì SQL Server Authentication

<configuration>
  <connectionStrings>
    <add name="MeetingDb"
         connectionString="Data Source=localhost;Initial Catalog=MeetingDB;User ID=sa;Password=YourPassword123;"
         providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>

> üîÅ Replace:

localhost ‚Üí your SQL Server name

MeetingDB ‚Üí your database name

User ID and Password ‚Üí your SQL login credentials





---

üóÉÔ∏è 4. SQL Server Setup

üìå Create Table:

CREATE TABLE Meetings (
    MeetingID INT IDENTITY(1,1) PRIMARY KEY,
    MeetingCode NVARCHAR(50),
    Title NVARCHAR(200),
    StartTime DATETIME,
    EndTime DATETIME,
    Venue NVARCHAR(200),
    Organizer NVARCHAR(100)
);

üìå Create Stored Procedure:

CREATE PROCEDURE InsertMeeting
    @MeetingCode NVARCHAR(50),
    @Title NVARCHAR(200),
    @StartTime DATETIME,
    @EndTime DATETIME,
    @Venue NVARCHAR(200),
    @Organizer NVARCHAR(100)
AS
BEGIN
    INSERT INTO Meetings (MeetingCode, Title, StartTime, EndTime, Venue, Organizer)
    VALUES (@MeetingCode, @Title, @StartTime, @EndTime, @Venue, @Organizer);
END


---

‚úÖ DONE!

You now have a:

üé® Bootstrap-styled form

üÜî Auto-generated Meeting ID (MTG-yyyyMMdd-###)

üíæ SQL Server backend with stored procedure

üîê SQL Server authentication setup



---

Would you like to add next:

üìã Table view of saved meetings?

üîç Search/filter (using DataTables)?

üßç Attendance entry?


Let me know and I‚Äôll help you build it!

--- 
071925 - 3:29PM
Great! Let's continue your ASP.NET Web Forms Meeting Attendance Logging system by doing the following after saving a meeting:


---

‚úÖ NEW FUNCTIONALITY OVERVIEW

After saving the meeting:

1. Redirect to a new page MeetingDetails.aspx


2. Pass the Meeting ID and Title


3. Show:

üÜî The Meeting ID

üìå The Meeting Title

üî≥ Input for Employee ID (tapping)

üìã A table showing tapped employee attendance (auto-refreshing)





---

üß± STEP-BY-STEP IMPLEMENTATION


---

üìÅ 1. Create New Web Form MeetingDetails.aspx

In Visual Studio:

Right-click your project ‚Üí Add ‚Üí Web Form ‚Üí name it MeetingDetails.aspx



---

üìÑ 2. Code for MeetingDetails.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeFile="MeetingDetails.aspx.cs" Inherits="MeetingDetails" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
</head>
<body>
    <form id="form1" runat="server">
        <div class="container mt-5">
            <h3>Meeting Details</h3>
            <p><strong>Meeting ID:</strong> <asp:Label ID="lblMeetingID" runat="server" /></p>
            <p><strong>Title:</strong> <asp:Label ID="lblTitle" runat="server" /></p>

            <div class="mb-3">
                <label for="txtEmployeeID" class="form-label">Tap / Enter Employee ID</label>
                <asp:TextBox ID="txtEmployeeID" runat="server" CssClass="form-control" AutoPostBack="true" OnTextChanged="txtEmployeeID_TextChanged" />
            </div>

            <h5>Attendance Log</h5>
            <asp:GridView ID="gvAttendance" runat="server" CssClass="table table-bordered table-sm" AutoGenerateColumns="false">
                <Columns>
                    <asp:BoundField DataField="EmployeeID" HeaderText="Employee ID" />
                    <asp:BoundField DataField="Timestamp" HeaderText="Timestamp" DataFormatString="{0:yyyy-MM-dd HH:mm:ss}" />
                </Columns>
            </asp:GridView>
        </div>
    </form>
</body>
</html>


---

üßæ 3. Code-Behind: MeetingDetails.aspx.cs

using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

public partial class MeetingDetails : System.Web.UI.Page
{
    protected string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            lblMeetingID.Text = Request.QueryString["meetingId"];
            lblTitle.Text = Request.QueryString["title"];
            LoadAttendance();
        }
    }

    protected void txtEmployeeID_TextChanged(object sender, EventArgs e)
    {
        string meetingId = lblMeetingID.Text;
        string employeeId = txtEmployeeID.Text;

        if (!string.IsNullOrWhiteSpace(employeeId))
        {
            using (SqlConnection conn = new SqlConnection(connStr))
            {
                string sql = "INSERT INTO MeetingAttendance (MeetingCode, EmployeeID, Timestamp) VALUES (@MeetingCode, @EmployeeID, GETDATE())";
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddWithValue("@MeetingCode", meetingId);
                    cmd.Parameters.AddWithValue("@EmployeeID", employeeId);

                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
            }

            txtEmployeeID.Text = "";
            LoadAttendance();
        }
    }

    private void LoadAttendance()
    {
        using (SqlConnection conn = new SqlConnection(connStr))
        {
            string sql = "SELECT EmployeeID, Timestamp FROM MeetingAttendance WHERE MeetingCode = @MeetingCode ORDER BY Timestamp DESC";
            using (SqlCommand cmd = new SqlCommand(sql, conn))
            {
                cmd.Parameters.AddWithValue("@MeetingCode", lblMeetingID.Text);
                conn.Open();

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    DataTable dt = new DataTable();
                    dt.Load(reader);
                    gvAttendance.DataSource = dt;
                    gvAttendance.DataBind();
                }
            }
        }
    }
}


---

üóÉÔ∏è 4. SQL Table for Attendance

Run this in SQL Server:

CREATE TABLE MeetingAttendance (
    AttendanceID INT IDENTITY(1,1) PRIMARY KEY,
    MeetingCode NVARCHAR(50),
    EmployeeID NVARCHAR(50),
    Timestamp DATETIME
);


---

üîÑ 5. Update the Redirect in MeetingForm.aspx.cs

In your btnSave_Click method after successful insert, replace:

lblStatus.Text = "Meeting saved with ID: " + meetingCode;

With:

Response.Redirect("MeetingDetails.aspx?meetingId=" + meetingCode + "&title=" + Server.UrlEncode(title));


---

‚úÖ RESULT

After saving a meeting:

You‚Äôre redirected to MeetingDetails.aspx

You see the Meeting ID and Title

You can type or scan an Employee ID

The table shows real-time attendance



---

Would you like to:

Prevent duplicate entries for the same employee?

Auto-refresh the table every X seconds?

Add employee names from a master table?


Let me know and I‚Äôll help you build those features too!

--- 072225

You can use Excel VBA to loop through the rows in your SAP GUI table control and select the row where the O/H Rate = "CR00", even if that column is read-only. Here's how to do it:


---

‚úÖ VBA Macro to Select Row in SAP Table by O/H Rate ("CR00")

Sub SelectRowByOHRate()
    Dim sapApp As Object
    Dim sapCon As Object
    Dim session As Object
    Dim rowCount As Integer
    Dim i As Integer
    Dim targetRate As String
    Dim ohRate As String

    targetRate = "CR00" ' The O/H Rate you want to find

    ' Get SAP session
    Set sapApp = GetObject("SAPGUI").GetScriptingEngine
    Set sapCon = sapApp.Children(0)
    Set session = sapCon.Children(0)

    ' Get row count of the table control
    rowCount = session.FindById("wnd[0]/usr/tblSAPLKKBLTAB_OVERHEAD").RowCount

    ' Loop through the table rows
    For i = 0 To rowCount - 1
        ' Get the O/H Rate value in column 1 (readonly)
        ohRate = session.FindById("wnd[0]/usr/tblSAPLKKBLTAB_OVERHEAD").GetCellValue(i, "KOSTL") ' Replace with actual column name

        If Trim(ohRate) = targetRate Then
            ' Select the row (e.g., click a cell or set cursor)
            session.FindById("wnd[0]/usr/tblSAPLKKBLTAB_OVERHEAD").GetAbsoluteRow(i).Selected = True

            MsgBox "O/H Rate '" & targetRate & "' found at row: " & i + 1
            Exit Sub
        End If
    Next i

    MsgBox "O/H Rate '" & targetRate & "' not found."

End Sub


---

‚ö†Ô∏è Important Notes:

Replace "KOSTL" with the actual technical field name of the O/H Rate column.

You can find this by turning on SAP GUI Scripting Recorder, clicking on the cell, and checking the generated ID.


"SAPLKKBLTAB_OVERHEAD" might differ depending on your system.

Use SAP Scripting Recorder to capture exact table ID and field names.


The .GetAbsoluteRow(i).Selected = True line can simulate row selection.



---

üìå To Get Correct Field Name:

1. Open SAP


2. Go to S_ALR_87008275


3. Open the table view with O/H Rate


4. Turn on SAP GUI Scripting Recorder


5. Click one of the rows manually (on O/H Rate)


6. Stop recording and check the generated script


7. Use that field name in place of "KOSTL"




---

Let me know if you want help analyzing your scripting recorder output. You can paste it here and I‚Äôll extract the correct table ID and column name.

