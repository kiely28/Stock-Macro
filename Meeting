Sure! Below is the complete code for Meeting Creation only, using:

ASP.NET Web Forms (C#)

Bootstrap for styling

SQL Server stored procedure

Auto-generated Meeting ID in the format MTG-YYYYMM-001



---

✅ 1. SQL Table: Tbl_Meetings

CREATE TABLE Tbl_Meetings (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    MeetingId NVARCHAR(50),
    Title NVARCHAR(200),
    StartDate DATETIME,
    EndDate DATETIME,
    Venue NVARCHAR(100),
    Organizer NVARCHAR(100),
    Remarks NVARCHAR(255)
);


---

✅ 2. Stored Procedure: InsertMeeting

CREATE PROCEDURE InsertMeeting
    @Title NVARCHAR(200),
    @StartDate DATETIME,
    @EndDate DATETIME,
    @Venue NVARCHAR(100),
    @Organizer NVARCHAR(100),
    @Remarks NVARCHAR(255),
    @MeetingId NVARCHAR(50) OUTPUT
AS
BEGIN
    DECLARE @Prefix NVARCHAR(20) = 'MTG-' + FORMAT(GETDATE(), 'yyyyMM') + '-'

    DECLARE @LastSeq INT = (
        SELECT ISNULL(MAX(CAST(RIGHT(MeetingId, 3) AS INT)), 0)
        FROM Tbl_Meetings
        WHERE MeetingId LIKE @Prefix + '%'
    )

    DECLARE @NextSeq INT = @LastSeq + 1

    SET @MeetingId = @Prefix + RIGHT('000' + CAST(@NextSeq AS VARCHAR), 3)

    INSERT INTO Tbl_Meetings (MeetingId, Title, StartDate, EndDate, Venue, Organizer, Remarks)
    VALUES (@MeetingId, @Title, @StartDate, @EndDate, @Venue, @Organizer, @Remarks)
END


---

✅ 3. CreateMeeting.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="CreateMeeting.aspx.cs" Inherits="YourNamespace.CreateMeeting" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Create Meeting</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-5">
        <h2>Create Meeting</h2>
        <div class="mb-3">
            <label for="txtTitle" class="form-label">Title/Agenda</label>
            <asp:TextBox ID="txtTitle" runat="server" CssClass="form-control" />
        </div>
        <div class="mb-3">
            <label for="txtStartDateTime" class="form-label">Start Date & Time</label>
            <asp:TextBox ID="txtStartDateTime" runat="server" CssClass="form-control" TextMode="DateTimeLocal" />
        </div>
        <div class="mb-3">
            <label for="txtEndDateTime" class="form-label">End Date & Time</label>
            <asp:TextBox ID="txtEndDateTime" runat="server" CssClass="form-control" TextMode="DateTimeLocal" />
        </div>
        <div class="mb-3">
            <label for="txtVenue" class="form-label">Venue/Location</label>
            <asp:TextBox ID="txtVenue" runat="server" CssClass="form-control" />
        </div>
        <div class="mb-3">
            <label for="txtOrganizer" class="form-label">Organizer</label>
            <asp:TextBox ID="txtOrganizer" runat="server" CssClass="form-control" />
        </div>
        <div class="mb-3">
            <label for="txtRemarks" class="form-label">Remarks</label>
            <asp:TextBox ID="txtRemarks" runat="server" CssClass="form-control" />
        </div>
        <asp:Button ID="btnSave" runat="server" Text="Save Meeting" CssClass="btn btn-primary" OnClick="btnSave_Click" />
        <br /><br />
        <asp:Label ID="lblResult" runat="server" CssClass="text-success fw-bold"></asp:Label>
    </form>
</body>
</html>


---

✅ 4. CreateMeeting.aspx.cs

using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace YourNamespace
{
    public partial class CreateMeeting : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e) { }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            string connStr = ConfigurationManager.ConnectionStrings["MyConn"].ConnectionString;
            string meetingId = "";

            using (SqlConnection conn = new SqlConnection(connStr))
            {
                using (SqlCommand cmd = new SqlCommand("InsertMeeting", conn))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Title", txtTitle.Text);
                    cmd.Parameters.AddWithValue("@StartDate", Convert.ToDateTime(txtStartDateTime.Text));
                    cmd.Parameters.AddWithValue("@EndDate", Convert.ToDateTime(txtEndDateTime.Text));
                    cmd.Parameters.AddWithValue("@Venue", txtVenue.Text);
                    cmd.Parameters.AddWithValue("@Organizer", txtOrganizer.Text);
                    cmd.Parameters.AddWithValue("@Remarks", txtRemarks.Text);

                    SqlParameter outputParam = new SqlParameter("@MeetingId", SqlDbType.NVarChar, 50)
                    {
                        Direction = ParameterDirection.Output
                    };
                    cmd.Parameters.Add(outputParam);

                    conn.Open();
                    cmd.ExecuteNonQuery();
                    conn.Close();

                    meetingId = outputParam.Value.ToString();

                    lblResult.Text = $"Meeting saved successfully!<br/>Meeting ID: <strong>{meetingId}</strong>";
                }
            }
        }
    }
}


---

✅ 5. Web.config (Connection String)

<configuration>
  <connectionStrings>
    <add name="MyConn" connectionString="Server=YOUR_SERVER_NAME;Database=YOUR_DATABASE_NAME;User Id=YOUR_USER;Password=YOUR_PASSWORD;" providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>

> 🔐 Replace YOUR_SERVER_NAME, YOUR_DATABASE_NAME, YOUR_USER, YOUR_PASSWORD accordingly.




---

Let me know when you're ready to proceed with:

Tapping Page

Preventing duplicate entries

LDAP login

Role-based access


I’ll guide you step by step.


Update 09:30AM
Here's the complete code for the MeetingList feature that:

Uses a stored procedure GetUserMeetings

Displays only today and future meetings

Filters by CreatedBy (based on logged-in user)

Uses Bootstrap for styling



---

✅ 1. SQL Server: Stored Procedure

CREATE PROCEDURE GetUserMeetings
    @CreatedBy NVARCHAR(100)
AS
BEGIN
    SELECT MeetingId, Title, StartDate, EndDate, Venue, Organizer
    FROM Tbl_Meetings
    WHERE CreatedBy = @CreatedBy 
      AND CAST(StartDate AS DATE) >= CAST(GETDATE() AS DATE)
    ORDER BY StartDate;
END

> Make sure Tbl_Meetings has a column CreatedBy (type NVARCHAR(100)).




---

✅ 2. Web Form: MeetingsList.aspx

📄 MeetingsList.aspx

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="MeetingsList.aspx.cs" Inherits="YourNamespace.MeetingsList" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>My Upcoming Meetings</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server" class="container mt-4">
        <h2 class="mb-4">My Upcoming Meetings</h2>
        <asp:GridView ID="gvMeetings" runat="server" CssClass="table table-bordered table-striped" AutoGenerateColumns="False">
            <Columns>
                <asp:BoundField DataField="MeetingId" HeaderText="Meeting ID" />
                <asp:BoundField DataField="Title" HeaderText="Title" />
                <asp:BoundField DataField="StartDate" HeaderText="Start Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
                <asp:BoundField DataField="EndDate" HeaderText="End Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
                <asp:BoundField DataField="Venue" HeaderText="Venue" />
                <asp:BoundField DataField="Organizer" HeaderText="Organizer" />
            </Columns>
        </asp:GridView>
        <asp:Label ID="lblMessage" runat="server" CssClass="text-danger fw-bold"></asp:Label>
    </form>
</body>
</html>


---

📄 MeetingsList.aspx.cs

using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace YourNamespace
{
    public partial class MeetingsList : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                LoadMeetings();
            }
        }

        private void LoadMeetings()
        {
            string connStr = ConfigurationManager.ConnectionStrings["MyConn"].ConnectionString;
            string currentUser = User.Identity.Name; // or Session["Username"].ToString();

            using (SqlConnection conn = new SqlConnection(connStr))
            using (SqlCommand cmd = new SqlCommand("GetUserMeetings", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@CreatedBy", currentUser);

                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);

                    if (dt.Rows.Count > 0)
                    {
                        gvMeetings.DataSource = dt;
                        gvMeetings.DataBind();
                    }
                    else
                    {
                        lblMessage.Text = "No upcoming meetings found.";
                        gvMeetings.DataSource = null;
                        gvMeetings.DataBind();
                    }
                }
            }
        }
    }
}


---

✅ 3. Web.config (Connection String)

Make sure your Web.config has:

<connectionStrings>
  <add name="MyConn" 
       connectionString="Data Source=YOUR_SERVER;Initial Catalog=YOUR_DATABASE;User ID=sa;Password=your_password;" 
       providerName="System.Data.SqlClient" />
</connectionStrings>


---

Let me know if you’d like to:

Add buttons to view, edit, or delete meetings

Filter by date range or keywords

Show meetings in a calendar view


We can easily expand this.



Update 09:57AM
Here’s how to add Start Meeting, Edit, and Delete buttons in the GridView of MeetingsList.aspx using ASP.NET Web Forms:


---

✅ Step-by-Step Update

🔧 1. Update MeetingsList.aspx – Add Command Buttons

Update your <asp:GridView> by adding a CommandField with custom buttons:

<asp:GridView ID="gvMeetings" runat="server" CssClass="table table-bordered table-striped"
    AutoGenerateColumns="False" OnRowCommand="gvMeetings_RowCommand" DataKeyNames="MeetingId">
    <Columns>
        <asp:BoundField DataField="MeetingId" HeaderText="Meeting ID" />
        <asp:BoundField DataField="Title" HeaderText="Title" />
        <asp:BoundField DataField="StartDate" HeaderText="Start Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
        <asp:BoundField DataField="EndDate" HeaderText="End Date" DataFormatString="{0:yyyy-MM-dd HH:mm}" />
        <asp:BoundField DataField="Venue" HeaderText="Venue" />
        <asp:BoundField DataField="Organizer" HeaderText="Organizer" />

        <asp:TemplateField HeaderText="Actions">
            <ItemTemplate>
                <asp:Button runat="server" Text="Start" CommandName="Start" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-success btn-sm me-1" />
                <asp:Button runat="server" Text="Edit" CommandName="EditMeeting" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-warning btn-sm me-1" />
                <asp:Button runat="server" Text="Delete" CommandName="DeleteMeeting" CommandArgument='<%# Eval("MeetingId") %>' CssClass="btn btn-danger btn-sm" OnClientClick="return confirm('Are you sure you want to delete this meeting?');" />
            </ItemTemplate>
        </asp:TemplateField>
    </Columns>
</asp:GridView>


---

🔧 2. Code-Behind: MeetingsList.aspx.cs

Add this event handler:

protected void gvMeetings_RowCommand(object sender, GridViewCommandEventArgs e)
{
    string meetingId = e.CommandArgument.ToString();

    if (e.CommandName == "Start")
    {
        // Redirect to Tapping Page (e.g., Attendance logging)
        Response.Redirect($"StartMeeting.aspx?meetingId={meetingId}");
    }
    else if (e.CommandName == "EditMeeting")
    {
        // Redirect to Edit page (you must create this)
        Response.Redirect($"EditMeeting.aspx?meetingId={meetingId}");
    }
    else if (e.CommandName == "DeleteMeeting")
    {
        DeleteMeeting(meetingId);
        LoadMeetings(); // refresh grid
    }
}


---

🔧 3. Add DeleteMeeting Method

You can implement the delete logic using a stored procedure:

SQL Stored Procedure (Optional)

CREATE PROCEDURE DeleteMeeting
    @MeetingId NVARCHAR(50)
AS
BEGIN
    DELETE FROM Tbl_Meetings WHERE MeetingId = @MeetingId;
END

C# Code

private void DeleteMeeting(string meetingId)
{
    string connStr = ConfigurationManager.ConnectionStrings["MyConn"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connStr))
    using (SqlCommand cmd = new SqlCommand("DeleteMeeting", conn))
    {
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.Parameters.AddWithValue("@MeetingId", meetingId);

        conn.Open();
        cmd.ExecuteNonQuery();
    }
}


---

✅ Result

Start → Opens StartMeeting.aspx?meetingId=...

Edit → Opens EditMeeting.aspx?meetingId=...

Delete → Calls stored procedure to remove the meeting



---

Let me know if you want to:

Add role-based permission (e.g., only creator can edit/delete)

Use modal dialogs instead of redirection

Confirm deletion with a Bootstrap modal instead of confirm()


I can help build those features next.




