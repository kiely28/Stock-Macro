Great ‚Äî to paste as percentage with 2 decimal places, we‚Äôll adjust the macro so that:

Values are pasted manually (not via .Value = .Value).

Format is explicitly set to Percentage with 2 decimal places.



---

‚úÖ Updated Macro with Formatting as Percentage (2 Decimal Places)

Sub OpenAndCopyMultipleRangesFormatted()
    Dim folderPath As String
    Dim fileName As String
    Dim filePath As String
    Dim fileCount As Integer
    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim wsTarget As Worksheet

    ' Set folder path
    folderPath = "D:\Coefficient\"

    ' Locate the only .xlsx file
    fileName = Dir(folderPath & "*.xlsx")
    Do While fileName <> ""
        fileCount = fileCount + 1
        filePath = folderPath & fileName
        fileName = Dir
    Loop

    ' Check file count
    If fileCount = 0 Then
        MsgBox "No .xlsx file found in the folder.", vbExclamation
        Exit Sub
    ElseIf fileCount > 1 Then
        MsgBox "More than one .xlsx file found. Please ensure only one exists.", vbExclamation
        Exit Sub
    End If

    ' Open source workbook and sheets
    Set wbSource = Workbooks.Open(filePath)
    Set wsSource = wbSource.Sheets(1) ' source sheet
    Set wsTarget = ThisWorkbook.Sheets("Sheet2") ' target sheet

    ' === Define Copy and Paste operations ===
    CopyAndFormat wsSource.Range("D32:E38"), wsTarget.Range("F2")
    CopyAndFormat wsSource.Range("F32:G38"), wsTarget.Range("F9")
    CopyAndFormat wsSource.Range("H32:I38"), wsTarget.Range("F16")
    CopyAndFormat wsSource.Range("H32:I38"), wsTarget.Range("F23")
    CopyAndFormat wsSource.Range("H32:I38"), wsTarget.Range("F30")
    CopyAndFormat wsSource.Range("H32:I38"), wsTarget.Range("F37")
    CopyAndFormat wsSource.Range("J32:K38"), wsTarget.Range("F44")

    ' Close source workbook
    wbSource.Close SaveChanges:=False

    MsgBox "All ranges copied and formatted as percentages with 2 decimals!"
End Sub

' === Helper Sub to copy values and format ===
Private Sub CopyAndFormat(srcRange As Range, tgtStartCell As Range)
    Dim r As Long, c As Long
    For r = 1 To srcRange.Rows.Count
        For c = 1 To srcRange.Columns.Count
            With tgtStartCell.Offset(r - 1, c - 1)
                .Value = srcRange.Cells(r, c).Value
                .NumberFormat = "0.00%"
            End With
        Next c
    Next r
End Sub


---

‚úÖ How to Use

1. Open your .xlsm file.


2. Press Alt + F11, insert a new Module.


3. Paste the code above.


4. Press F5 or use Alt + F8 and run OpenAndCopyMultipleRangesFormatted.




---

üìù Notes:

All pasted data will be converted to percentage format with 2 decimal places, e.g., 0.25 becomes 25.00%.

If the source data is already in percentage format (like 25%), the formatting will just enforce two decimal places.


Let me know if you want to paste values only (no formulas) or ignore blank cells.


08/06/25 Update 05:49AM
Great! Here's how to use Conditional Formatting in Excel to highlight Column H based on its value (1, 2, 3, or 4), following your logic:


---

‚úÖ Step-by-Step: Highlight Column H Based on Value

1. Select the cells

Select the range you want to apply formatting to ‚Äî for example:
H2:H50


2. Go to Conditional Formatting

Click on the Home tab ‚Üí Conditional Formatting ‚Üí New Rule



---

üî∑ Add Rules One by One:

‚úÖ Rule for Value = 1 (F>0%, G>0%)

1. Select: ‚ÄúFormat only cells that contain‚Äù


2. Rule:

Cell Value ‚Üí equal to ‚Üí 1



3. Click Format ‚Üí choose Green fill (or any color)


4. Click OK




---

‚úÖ Rule for Value = 2 (F=0%, G>0%)

1. New Rule ‚Üí ‚ÄúFormat only cells that contain‚Äù


2. Cell Value ‚Üí equal to ‚Üí 2


3. Format ‚Üí choose Blue fill


4. OK




---

‚úÖ Rule for Value = 3 (F>0%, G=0%)

1. New Rule ‚Üí Cell Value = 3


2. Format ‚Üí Orange fill


3. OK




---

‚úÖ Rule for Value = 4 (F=0%, G=0%)

1. New Rule ‚Üí Cell Value = 4


2. Format ‚Üí Red fill


3. OK




---

üéâ Result:

Now, column H will:

Green for rows where both F & G > 0

Blue for F = 0 and G > 0

Orange for F > 0 and G = 0

Red for both = 0



---

Would you like to apply similar formatting to entire rows instead of just column H?




*****
Yes! You can achieve this same logic using an Excel formula in column H, without using VBA.


---

‚úÖ Your Logic Recap:

You want to evaluate columns F and G, and in column H, assign a value based on:

F (%)	G (%)	H (Result)

= 0.00%	> 0.00%	2
> 0.00%	= 0.00%	3
= 0.00%	= 0.00%	4
> 0.00%	> 0.00%	1



---

‚úÖ Formula (for cell H2):

Paste this into H2, then drag it down:

=IF(AND(F2=0,G2>0),2,
 IF(AND(F2>0,G2=0),3,
 IF(AND(F2=0,G2=0),4,
 IF(AND(F2>0,G2>0),1,"")))


---

‚úÖ Explanation:

F2 and G2 are assumed to be percentages (e.g., 0.25 = 25%)

The formula uses nested IF and AND to check all conditions.

Returns "" (blank) if none match (which shouldn't happen in your case).



---

üìå Tip:

Make sure that cells in columns F and G are numeric percentage values, not text (like "25%").

You can apply this formula from H2 down to H50 (or however many rows you're working with).


Would you like to highlight the values using conditional formatting too?

*****
Perfect! Based on your full logic for updating column H in Sheet2, here's the breakdown:


---

‚úÖ Conditions:

Column F	Column G	Column H (Set To)

= 0.00%	> 0.00%	2
> 0.00%	= 0.00%	3
= 0.00%	= 0.00%	4
> 0.00%	> 0.00%	1



---

‚úÖ Final VBA Code:

Sub SetValueInColumnH()
    Dim ws As Worksheet
    Dim i As Long
    Dim valF As Double
    Dim valG As Double

    Set ws = ThisWorkbook.Sheets("Sheet2")

    ' Loop from row 2 to 50
    For i = 2 To 50
        valF = ws.Cells(i, "F").Value
        valG = ws.Cells(i, "G").Value

        ' Apply logic based on F and G
        Select Case True
            Case valF = 0 And valG > 0
                ws.Cells(i, "H").Value = 2
            Case valF > 0 And valG = 0
                ws.Cells(i, "H").Value = 3
            Case valF = 0 And valG = 0
                ws.Cells(i, "H").Value = 4
            Case valF > 0 And valG > 0
                ws.Cells(i, "H").Value = 1
        End Select
    Next i

    MsgBox "Column H updated based on all conditions."
End Sub


---

‚úÖ How to Use:

1. Open the VBA Editor (Alt + F11)


2. Insert a new Module if needed.


3. Paste the code.


4. Run SetValueInColumnH via Alt + F8.




---

üìù Tip:

This works best if your data in Columns F & G are numeric values formatted as percentages, not text.

If you‚Äôre copying from an external file, make sure formulas or formatting don't cause hidden issues ‚Äî you can paste as values to avoid this.


Let me know if you want to extend this logic to column I ‚Üí column J, etc.


*****
UPDATE 12:43PM

Got it!

You want the pasted values to be:

Shown with 2 decimal places

Not formatted as percentages (i.e., just normal numbers, like 0.25, not 25.00%)



---

‚úÖ Updated Version of the Macro

This revised macro:

Opens the only .xlsx file in D:\Coefficient

Copies all your specified ranges

Pastes them into Sheet2 of your .xlsm file

Applies number format with 2 decimal places (not percent)



---

üîÅ Updated VBA Code:

Sub OpenAndCopyWithTwoDecimals()
    Dim folderPath As String
    Dim fileName As String
    Dim filePath As String
    Dim fileCount As Integer
    Dim wbSource As Workbook
    Dim wsSource As Worksheet
    Dim wsTarget As Worksheet

    ' Set folder path
    folderPath = "D:\Coefficient\"

    ' Locate the only .xlsx file
    fileName = Dir(folderPath & "*.xlsx")
    Do While fileName <> ""
        fileCount = fileCount + 1
        filePath = folderPath & fileName
        fileName = Dir
    Loop

    ' Validate file count
    If fileCount = 0 Then
        MsgBox "No .xlsx file found in the folder.", vbExclamation
        Exit Sub
    ElseIf fileCount > 1 Then
        MsgBox "More than one .xlsx file found. Please ensure only one exists.", vbExclamation
        Exit Sub
    End If

    ' Open the source file
    Set wbSource = Workbooks.Open(filePath)
    Set wsSource = wbSource.Sheets(1)
    Set wsTarget = ThisWorkbook.Sheets("Sheet2")

    ' Copy and paste with 2 decimal places (no percent)
    CopyWithTwoDecimals wsSource.Range("D32:E38"), wsTarget.Range("F2")
    CopyWithTwoDecimals wsSource.Range("F32:G38"), wsTarget.Range("F9")
    CopyWithTwoDecimals wsSource.Range("H32:I38"), wsTarget.Range("F16")
    CopyWithTwoDecimals wsSource.Range("H32:I38"), wsTarget.Range("F23")
    CopyWithTwoDecimals wsSource.Range("H32:I38"), wsTarget.Range("F30")
    CopyWithTwoDecimals wsSource.Range("H32:I38"), wsTarget.Range("F37")
    CopyWithTwoDecimals wsSource.Range("J32:K38"), wsTarget.Range("F44")

    ' Close the source workbook
    wbSource.Close SaveChanges:=False

    MsgBox "Data copied with 2 decimal places (no percentage format)."
End Sub

' === Helper Sub to copy values and apply number formatting with 2 decimal places ===
Private Sub CopyWithTwoDecimals(srcRange As Range, tgtStartCell As Range)
    Dim r As Long, c As Long
    For r = 1 To srcRange.Rows.Count
        For c = 1 To srcRange.Columns.Count
            With tgtStartCell.Offset(r - 1, c - 1)
                .Value = srcRange.Cells(r, c).Value
                .NumberFormat = "0.00"
            End With
        Next c
    Next r
End Sub


---

‚úÖ Result:

Pasted numbers will be plain numbers like 0.25

Formatted as 0.25 not 25.00%

Displayed with 2 decimal places



---

Let me know if:

You want to multiply percent values first (e.g. convert 25% ‚Üí 0.25)

Or round numbers before pasting

Or if the source file has formulas you'd like stripped to values only


****

Thanks for the clarification!

You're right ‚Äî if you're seeing long decimal values like 4.30157546910275, then even though the format is set to 2 decimal places, the actual value is still the full precision number.

If you want to actually round the value to 2 decimal places (not just format it), then we need to use Round() in VBA before assigning the value.


---

‚úÖ Updated VBA Helper ‚Äî Round to 2 Decimal Places:

Replace the CopyWithTwoDecimals subroutine with this updated version:

Private Sub CopyWithTwoDecimals(srcRange As Range, tgtStartCell As Range)
    Dim r As Long, c As Long
    Dim val As Variant

    For r = 1 To srcRange.Rows.Count
        For c = 1 To srcRange.Columns.Count
            val = srcRange.Cells(r, c).Value
            If IsNumeric(val) Then
                val = Round(val, 2) ' <-- Round to 2 decimals
            End If

            With tgtStartCell.Offset(r - 1, c - 1)
                .Value = val
                .NumberFormat = "0.00" ' Format with 2 decimal places
            End With
        Next c
    Next r
End Sub


---

üîÅ No changes needed in the main macro ‚Äî just replace the helper subroutine.


---

‚úÖ Now it will:

Round values to exactly 2 decimal places

Display and store the number like 4.30, not 4.30157546910275

Work correctly even if source cells contain high-precision numbers



---

Let me know if you also want to:

Paste only non-zero values

Treat blank cells differently

Automatically trigger the logic when a button is clicked or workbook is opened




*****
UPDATE 05:59AM 08/07/25

Perfect! Here's your full VBA macro that:

1. Loops 7 times over Sheet2!C2:C8 of your Workbook.xlsm


2. Inputs each value into SAP's O/H Key field (assuming SAP is open and scripting is enabled)


3. Takes a screenshot of the SAP window after each input


4. Creates a new Excel workbook


5. Adds 1 worksheet per screenshot


6. Pastes each screenshot and names the sheet based on the O/H Key value


7. Saves the workbook as D:\prooflist.xlsx




---

‚úÖ Final VBA Code

Sub PasteOHKey_Screenshot_SaveToProofList()
    Dim sapGuiAuto As Object
    Dim SAPApp As Object
    Dim SAPCon As Object
    Dim session As Object
    Dim ws As Worksheet
    Dim i As Long
    Dim ohKeyValue As String
    
    Dim wbProof As Workbook
    Dim shtProof As Worksheet
    
    ' Set reference to Sheet2
    Set ws = ThisWorkbook.Sheets("Sheet2")

    ' Create new workbook for screenshots
    Set wbProof = Workbooks.Add
    
    ' Connect to SAP GUI session
    On Error Resume Next
    Set sapGuiAuto = GetObject("SAPGUI")
    If sapGuiAuto Is Nothing Then
        MsgBox "SAP GUI is not running."
        Exit Sub
    End If
    Set SAPApp = sapGuiAuto.GetScriptingEngine
    Set SAPCon = SAPApp.Children(0)
    Set session = SAPCon.Children(0)
    On Error GoTo 0

    If session Is Nothing Then
        MsgBox "No active SAP session found."
        Exit Sub
    End If

    ' Loop through rows 2 to 8 in Column C
    For i = 2 To 8
        ohKeyValue = Trim(ws.Cells(i, 3).Value) ' Column C
        
        If ohKeyValue <> "" Then
            ' Input value into SAP (change field ID if needed)
            session.findById("wnd[0]/usr/ctxtOHKEY").Text = ohKeyValue
            
            ' Optional: trigger update if needed
            ' session.findById("wnd[0]").sendVKey 0
            
            ' Wait to ensure SAP updated
            Application.Wait Now + TimeValue("0:00:01")
            
            ' Take screenshot using .hardCopy (copies to clipboard)
            session.findById("wnd[0]").hardCopy
            
            ' Add new sheet to proof workbook
            Set shtProof = wbProof.Sheets.Add(After:=wbProof.Sheets(wbProof.Sheets.Count))
            On Error Resume Next
            shtProof.Name = Left(ohKeyValue, 31) ' Max 31 chars
            On Error GoTo 0
            
            ' Paste image from clipboard
            shtProof.Range("A1").Select
            shtProof.Paste
            
            ' Wait briefly before next
            Application.Wait Now + TimeValue("0:00:01")
        End If
    Next i

    ' Remove default extra sheet if it still exists
    On Error Resume Next
    Application.DisplayAlerts = False
    wbProof.Sheets("Sheet1").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0

    ' Save final workbook
    wbProof.SaveAs Filename:="D:\prooflist.xlsx", FileFormat:=xlOpenXMLWorkbook
    wbProof.Close SaveChanges:=False
    
    MsgBox "Proof list created and saved to D:\prooflist.xlsx"
End Sub


---

üîß What You Need to Check / Update

What	Where	Notes

SAP Field ID	"wnd[0]/usr/ctxtOHKEY"	Use SAP‚Äôs scripting recorder or F1 ‚Üí Technical Info to verify it
Save Path	D:\prooflist.xlsx	Make sure the path exists and is writable
Max Sheet Name	Left(ohKeyValue, 31)	Excel limits sheet names to 31 characters



---

Let me know if you want to add timestamps, embed text labels, or send the proof workbook via email automatically!

