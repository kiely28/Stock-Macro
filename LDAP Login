Here is a complete step-by-step guide for adding a Login Page with LDAP authentication to your ASP.NET Web Forms (.NET Framework) application. This will allow users to log in using their Active Directory (AD) credentials.


---

✅ What You’ll Build

A simple Login.aspx page where users input:

Username

Password


The system will:

Authenticate credentials using LDAP

Redirect to the Default.aspx or dashboard page if valid

Show an error if login fails




---

🧱 STEP-BY-STEP PROCEDURE


---

🔹 Step 1: Add the Login Page

1. Right-click your project > Add > Web Form


2. Name it: Login.aspx




---

🧾 Step 2: Design the Login Page UI

Inside Login.aspx, replace the default markup with:

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Login.aspx.cs" Inherits="YourProjectNamespace.Login" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>LDAP Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body class="bg-light">
    <form id="form1" runat="server">
        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-4">
                    <div class="card shadow p-4">
                        <h4 class="text-center mb-4">Login</h4>

                        <asp:Label ID="lblMessage" runat="server" CssClass="text-danger" Visible="false" />

                        <div class="form-group mb-3">
                            <asp:TextBox ID="txtUsername" runat="server" CssClass="form-control" placeholder="Username" />
                        </div>

                        <div class="form-group mb-3">
                            <asp:TextBox ID="txtPassword" runat="server" TextMode="Password" CssClass="form-control" placeholder="Password" />
                        </div>

                        <asp:Button ID="btnLogin" runat="server" CssClass="btn btn-primary w-100" Text="Login" OnClick="btnLogin_Click" />
                    </div>
                </div>
            </div>
        </div>
    </form>
</body>
</html>


---

🔹 Step 3: Add the Code Behind (Login.aspx.cs)

Replace YourDomain with your actual domain name.

using System;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;

namespace YourProjectNamespace
{
    public partial class Login : System.Web.UI.Page
    {
        protected void btnLogin_Click(object sender, EventArgs e)
        {
            string username = txtUsername.Text.Trim();
            string password = txtPassword.Text;

            if (IsAuthenticated("YourDomain", username, password))
            {
                // Store session
                Session["Username"] = username;

                // Redirect to main page
                Response.Redirect("Default.aspx");
            }
            else
            {
                lblMessage.Visible = true;
                lblMessage.Text = "Invalid username or password.";
            }
        }

        private bool IsAuthenticated(string domain, string username, string password)
        {
            try
            {
                using (PrincipalContext pc = new PrincipalContext(ContextType.Domain, domain))
                {
                    return pc.ValidateCredentials(username, password);
                }
            }
            catch
            {
                return false;
            }
        }
    }
}


---

🔹 Step 4: Enable System.DirectoryServices.AccountManagement

1. In Solution Explorer, right-click References > Add Reference…


2. Go to Assemblies → Search and check:

System.DirectoryServices

System.DirectoryServices.AccountManagement



3. Click OK.




---

🔹 Step 5: Protect Pages Using Session Check

In Default.aspx.cs or any page you want to protect, add this:

protected void Page_Load(object sender, EventArgs e)
{
    if (Session["Username"] == null)
    {
        Response.Redirect("Login.aspx");
    }
}


---

🔹 Step 6: (Optional) Add Logout Button

In Default.aspx:

<asp:Button ID="btnLogout" runat="server" Text="Logout" OnClick="btnLogout_Click" CssClass="btn btn-danger" />

In Default.aspx.cs:

protected void btnLogout_Click(object sender, EventArgs e)
{
    Session.Clear();
    Response.Redirect("Login.aspx");
}


---

✅ Result

🔐 LDAP login using Active Directory

✅ Authenticated users only access protected pages

💡 Clean and responsive Bootstrap interface



---

🧠 Notes

Your app must be hosted inside a network with access to your AD (e.g., company intranet).

Make sure the domain name in the code matches your organization’s Active Directory domain name.

If using OU filtering, we can expand this further.



---

Would you like to add role-based authorization using LDAP groups next?

