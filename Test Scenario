
Perfect! Let's extend your ASP.NET Web Forms Meeting Attendance Logging app to save the form data to SQL Server using a Stored Procedure. Here's a step-by-step guide:


---

‚úÖ WHAT YOU NEED

SQL Server (Express or full version)

Connection string to your SQL Server database

A Meetings table

A stored procedure to insert data

Update your btnSave_Click to use ADO.NET



---

üîß STEP 1: Create SQL Table

Open SQL Server Management Studio (SSMS) and run:

CREATE TABLE Meetings (
    MeetingID INT IDENTITY(1,1) PRIMARY KEY,
    Title NVARCHAR(200),
    StartTime DATETIME,
    EndTime DATETIME,
    Venue NVARCHAR(200),
    Organizer NVARCHAR(100)
);


---

‚öôÔ∏è STEP 2: Create Stored Procedure

Run this SQL to add a stored procedure:

CREATE PROCEDURE InsertMeeting
    @Title NVARCHAR(200),
    @StartTime DATETIME,
    @EndTime DATETIME,
    @Venue NVARCHAR(200),
    @Organizer NVARCHAR(100)
AS
BEGIN
    INSERT INTO Meetings (Title, StartTime, EndTime, Venue, Organizer)
    VALUES (@Title, @StartTime, @EndTime, @Venue, @Organizer);
END


---

üìÇ STEP 3: Add Connection String in Web.config

In your project, open Web.config and inside <configuration>, add:

<connectionStrings>
  <add name="MeetingDb" 
       connectionString="Data Source=YOUR_SERVER_NAME;Initial Catalog=YOUR_DATABASE_NAME;Integrated Security=True;" 
       providerName="System.Data.SqlClient" />
</connectionStrings>

> üîÅ Replace YOUR_SERVER_NAME and YOUR_DATABASE_NAME accordingly
Example: Data Source=.\SQLEXPRESS;Initial Catalog=MeetingDB;Integrated Security=True;




---

üß† STEP 4: Update Code-Behind (MeetingForm.aspx.cs)

Add these namespaces at the top:

using System.Data;
using System.Data.SqlClient;
using System.Configuration;

Update btnSave_Click method:

protected void btnSave_Click(object sender, EventArgs e)
{
    string title = txtTitle.Text;
    DateTime startTime = Convert.ToDateTime(txtStart.Text);
    DateTime endTime = Convert.ToDateTime(txtEnd.Text);
    string venue = txtVenue.Text;
    string organizer = txtOrganizer.Text;

    string connStr = ConfigurationManager.ConnectionStrings["MeetingDb"].ConnectionString;

    using (SqlConnection conn = new SqlConnection(connStr))
    {
        using (SqlCommand cmd = new SqlCommand("InsertMeeting", conn))
        {
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@Title", title);
            cmd.Parameters.AddWithValue("@StartTime", startTime);
            cmd.Parameters.AddWithValue("@EndTime", endTime);
            cmd.Parameters.AddWithValue("@Venue", venue);
            cmd.Parameters.AddWithValue("@Organizer", organizer);

            conn.Open();
            cmd.ExecuteNonQuery();
            conn.Close();

            lblStatus.Text = "Meeting saved to database successfully!";
        }
    }
}


---

‚úÖ STEP 5: Run and Test

1. Run the app (Ctrl + F5)


2. Fill out the form and click Save


3. Open SQL Server and check Meetings table ‚Äî your data should be saved!




---

üß™ Next Ideas (optional):

Show saved meetings using DataTables

Add edit/delete functions

Add a meeting attendance log table


Want help with any of these next steps?

----------

Great! If you're using SQL Server Authentication, you'll need to update your connection string in Web.config to include your SQL username and password instead of Integrated Security=True.


---

‚úÖ STEP 1: Update Connection String

Open your Web.config and replace the existing connection string with this format:

<connectionStrings>
  <add name="MeetingDb" 
       connectionString="Data Source=YOUR_SERVER_NAME;Initial Catalog=YOUR_DATABASE_NAME;User ID=YOUR_USERNAME;Password=YOUR_PASSWORD;" 
       providerName="System.Data.SqlClient" />
</connectionStrings>

üîÅ Replace:

Placeholder	Description

YOUR_SERVER_NAME	e.g. localhost, .\SQLEXPRESS, or server IP
YOUR_DATABASE_NAME	The name of your database (e.g. MeetingDB)
YOUR_USERNAME	Your SQL login username (e.g. sa)
YOUR_PASSWORD	The corresponding SQL password



---

‚úÖ Example (SQL Auth):

<connectionStrings>
  <add name="MeetingDb" 
       connectionString="Data Source=localhost;Initial Catalog=MeetingDB;User ID=sa;Password=MySecurePass123;" 
       providerName="System.Data.SqlClient" />
</connectionStrings>

> üîí Never share passwords in source code or public repositories. For production, store sensitive data securely (e.g., in environment variables or encrypted config files).




---

‚úÖ STEP 2: Run and Test

After updating the connection string:

1. Save changes


2. Run the project


3. Fill out and submit the meeting form


4. Check SQL Server ‚Äî the data should appear in the Meetings table




---

Would you like help adding a grid view or table to show all saved meetings using DataTables + Bootstrap?


071920
Here's how you can create a simple ASP.NET Web Forms application in C# with Bootstrap styling that allows users to input:

Agenda

Meeting Date

And automatically generate a Meeting ID



---

‚úÖ Step-by-Step Instructions

1. Create a new Web Forms project

In Visual Studio:

File ‚Üí New ‚Üí Project

Choose ASP.NET Web Application (.NET Framework)

Name it: MeetingApp

Select Web Forms



---

2. Add Bootstrap for Styling

Add this line in Site.Master inside <head>:

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />


---

3. Design Default.aspx

Replace the content of Default.aspx with this:

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="MeetingApp.Default" %>

<!DOCTYPE html>
<html>
<head runat="server">
    <title>Meeting Entry</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body>
    <form id="form1" runat="server">
        <div class="container mt-5">
            <h2 class="mb-4">Meeting Entry Form</h2>

            <div class="mb-3">
                <label for="txtAgenda" class="form-label">Agenda:</label>
                <asp:TextBox ID="txtAgenda" runat="server" CssClass="form-control" />
            </div>

            <div class="mb-3">
                <label for="txtMeetingDate" class="form-label">Meeting Date:</label>
                <asp:TextBox ID="txtMeetingDate" runat="server" CssClass="form-control" TextMode="Date" />
            </div>

            <asp:Button ID="btnSave" runat="server" Text="Save Meeting" CssClass="btn btn-primary" OnClick="btnSave_Click" />

            <hr />
            <asp:Label ID="lblResult" runat="server" CssClass="mt-3 d-block text-success" />
        </div>
    </form>
</body>
</html>


---

4. Backend Logic: Default.aspx.cs

Open Default.aspx.cs and paste:

using System;

namespace MeetingApp
{
    public partial class Default : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            string agenda = txtAgenda.Text.Trim();
            string meetingDate = txtMeetingDate.Text;

            // Generate meeting ID: "MTG" + timestamp
            string meetingID = "MTG" + DateTime.Now.ToString("yyyyMMddHHmmss");

            // You can save this to a DB or file (not covered here)
            lblResult.Text = $"Meeting saved!<br />Agenda: {agenda}<br />Date: {meetingDate}<br />Meeting ID: <strong>{meetingID}</strong>";
        }
    }
}


---

‚úÖ Output

A simple form styled with Bootstrap.

When clicking Save Meeting, it displays:

The agenda

The date

The generated unique Meeting ID.




---

Would you like to extend this to store in SQL Server or add attendee logging next?


